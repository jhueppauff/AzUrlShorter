@page "/List"
@attribute [Authorize()]
@using frontend.Model
@using System.Net.Http
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication

@inject UrlShorterClient client;

@using System.Reflection;

<h1>Your shortlinks</h1>

<div class="container">
    <div class="row col-md-6 col-md-offset-2 custyle">
        <table class="table table-striped custab">
            <thead>
                <tr>
                    <td>Domain</td>
                    <td>ShortKey</td>
                    <td>Original Url</td>
                    <td>Short link</td>
                </tr>
            </thead>
            @foreach (var shortUrl in shortUrls)
            {
                <tr>
                    <td>@shortUrl.RowKey</td>
                    <td>@shortUrl.PartitionKey</td>
                    <td><a href="@shortUrl.Url">@shortUrl.Url</a></td>
                    <td><a
                        href="https://@shortUrl.RowKey/@shortUrl.PartitionKey">https://@shortUrl.RowKey/@shortUrl.PartitionKey</a>
                    </td>
                    <td><button @onclick="@(() => Delete(shortUrl))" class="btn btn-danger"><span
                            class="glyphicon glyphicon-remove-sign"></span> Delete</button></td>
                </tr>
            }
        </table>
    </div>
</div>

@code {
    private List<Model.ShortUrl> shortUrls = new();

    protected override async Task OnInitializedAsync()
    {
        await Refresh();
    }

    private async Task Refresh()
    {
        try
        {
            shortUrls = await client.GetLinks().ConfigureAwait(false);
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    private async Task Delete(ShortUrl shortUrl)
    {
        await client.DeleteLink(shortUrl);
        await Refresh();
    }
}